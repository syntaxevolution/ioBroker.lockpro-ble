{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nclass LockproBle extends utils.Adapter {\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: \"lockpro-ble\",\r\n        });\r\n        this.on(\"ready\", this.onReady.bind(this));\r\n        this.on(\"stateChange\", this.onStateChange.bind(this));\r\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n        // this.on(\"message\", this.onMessage.bind(this));\r\n        this.on(\"unload\", this.onUnload.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        // Initialize your adapter here\r\n\r\n        // Reset the connection indicator during startup\r\n        this.setState(\"info.connection\", false, true);\r\n\r\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n        // this.config:\r\n        this.log.info(\"config bleHci: \" + this.config.bleHci);\r\n        this.log.info(\"config lockMac: \" + this.config.lockMac);\r\n        this.log.info(\"config keyId: \" + this.config.keyId);\r\n        this.log.info(\"config encKey: \" + this.config.encKey);\r\n        this.log.info(\"config poll: \" + this.config.poll);\r\n\r\n        /*\r\n        For every state in the system there has to be also an object of type state\r\n        Here a simple template for a boolean variable named \"testVariable\"\r\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n        */\r\n        await this.setObjectNotExistsAsync(\"testVariable\", {\r\n            type: \"state\",\r\n            common: {\r\n                name: \"testVariable\",\r\n                type: \"boolean\",\r\n                role: \"indicator\",\r\n                read: true,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n\r\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n        this.subscribeStates(\"testVariable\");\r\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n        // this.subscribeStates(\"lights.*\");\r\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n        // this.subscribeStates(\"*\");\r\n\r\n        /*\r\n            setState examples\r\n            you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n        */\r\n        // the variable testVariable is set to true as command (ack=false)\r\n        await this.setStateAsync(\"testVariable\", true);\r\n\r\n        // same thing, but the value is flagged \"ack\"\r\n        // ack should be always set to true if the value is received from or acknowledged from the target system\r\n        await this.setStateAsync(\"testVariable\", { val: true, ack: true });\r\n\r\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n        await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\r\n\r\n        // examples for the checkPassword/checkGroup functions\r\n        const isPasswordCorrect = await this.checkPasswordAsync(\"admin\", \"iobroker\");\r\n        this.log.info(\"check user admin pw iobroker: \" + isPasswordCorrect);\r\n\r\n        const isInGroup = await this.checkGroupAsync(\"admin\", \"admin\");\r\n        this.log.info(`check group result: ${isInGroup}`);\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            // Here you must clear all timeouts or intervals that may still be active\r\n            // clearTimeout(timeout1);\r\n            // clearTimeout(timeout2);\r\n            // ...\r\n            // clearInterval(interval1);\r\n\r\n            callback();\r\n        } catch (e) {\r\n            this.log.error(`onUnload error: ${e instanceof Error ? e.message : String(e)}`);\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n    // /**\r\n    //  * Is called if a subscribed object changes\r\n    //  */\r\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n    //     if (obj) {\r\n    //         // The object was changed\r\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n    //     } else {\r\n    //         // The object was deleted\r\n    //         this.log.info(`object ${id} deleted`);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n    // /**\r\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n    //  */\r\n    // private onMessage(obj: ioBroker.Message): void {\r\n    //     if (typeof obj === \"object\" && obj.message) {\r\n    //         if (obj.command === \"send\") {\r\n    //             // e.g. send email or pushover or whatever\r\n    //             this.log.info(\"send command\");\r\n\r\n    //             // Send response in callback if required\r\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new LockproBle(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new LockproBle())();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAKvB,MAAM,mBAAmB,MAAM,QAAQ;AAAA,EAE5B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAInC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAI5C,SAAK,IAAI,KAAK,oBAAoB,KAAK,OAAO,MAAM;AACpD,SAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,OAAO;AACtD,SAAK,IAAI,KAAK,mBAAmB,KAAK,OAAO,KAAK;AAClD,SAAK,IAAI,KAAK,oBAAoB,KAAK,OAAO,MAAM;AACpD,SAAK,IAAI,KAAK,kBAAkB,KAAK,OAAO,IAAI;AAOhD,UAAM,KAAK,wBAAwB,gBAAgB;AAAA,MAC/C,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AAGD,SAAK,gBAAgB,cAAc;AAWnC,UAAM,KAAK,cAAc,gBAAgB,IAAI;AAI7C,UAAM,KAAK,cAAc,gBAAgB,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AAGjE,UAAM,KAAK,cAAc,gBAAgB,EAAE,KAAK,MAAM,KAAK,MAAM,QAAQ,GAAG,CAAC;AAG7E,UAAM,oBAAoB,MAAM,KAAK,mBAAmB,SAAS,UAAU;AAC3E,SAAK,IAAI,KAAK,mCAAmC,iBAAiB;AAElE,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,OAAO;AAC7D,SAAK,IAAI,KAAK,uBAAuB,SAAS,EAAE;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAG;AACR,WAAK,IAAI,MAAM,mBAAmB,aAAa,QAAQ,EAAE,UAAU,OAAO,CAAC,CAAC,EAAE;AAC9E,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,EAAE,aAAa,MAAM,GAAG,WAAW,MAAM,GAAG,GAAG;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,WAAW,OAAO;AACnG,OAAO;AAEH,GAAC,MAAM,IAAI,WAAW,GAAG;AAC7B;",
  "names": []
}
